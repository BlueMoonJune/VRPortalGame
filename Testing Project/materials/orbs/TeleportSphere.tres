[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded, cull_disabled, depth_draw_always;

uniform sampler2D noise;
//uniform float progress : hint_range(0,1);
uniform float scale : hint_range(1,10);

float Remap (float value, float from1, float to1, float from2, float to2) {
    return (value - from1) / (to1 - from1) * (to2 - from2) + from2;
}

void fragment() {
	float progress = mod(TIME/3.0,1.0);
	vec3 albedo = vec3((texture(noise, UV*vec2(1.0,scale)+TIME).r - 0.40) * 5.0 + 0.5);
	ALBEDO = clamp(albedo,0,1);
	float prog = Remap(progress,0.0,1.0,-1.0/scale,1.0+1.0/scale);
	float alpha = (UV.y-(1.0-prog))*5.0+texture(noise, UV).r;
	ALPHA = clamp(alpha,0,1);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/scale = 4.0
shader_param/noise = SubResource( 3 )
